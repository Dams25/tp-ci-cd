#!/bin/bash

# üöÄ TodoList Production - Script de d√©marrage intelligent
# Ce script guide l'utilisateur vers les bonnes ressources selon ses besoins

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fonction d'affichage avec style
print_header() {
    echo -e "${CYAN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë              üöÄ TodoList Production - Guide                  ‚ïë"
    echo "‚ïë            Solution Ansible Robuste & Modulaire             ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

print_section() {
    echo -e "${BLUE}‚ñ∂ $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Fonction pour v√©rifier les pr√©requis
check_requirements() {
    print_section "V√©rification des pr√©requis..."
    
    local missing_deps=()
    
    if ! command -v docker &> /dev/null; then
        missing_deps+=("docker")
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        missing_deps+=("docker-compose")
    fi
    
    if ! command -v make &> /dev/null; then
        missing_deps+=("make")
    fi
    
    if [ ${#missing_deps[@]} -eq 0 ]; then
        print_success "Tous les pr√©requis sont install√©s !"
        return 0
    else
        print_error "Pr√©requis manquants: ${missing_deps[*]}"
        return 1
    fi
}

# Fonction pour afficher le menu principal
show_menu() {
    echo -e "${PURPLE}"
    echo "üéØ Que souhaitez-vous faire ?"
    echo -e "${NC}"
    echo "1Ô∏è‚É£  D√©marrage rapide (d√©veloppement local)"
    echo "2Ô∏è‚É£  D√©ploiement production avec Ansible"
    echo "3Ô∏è‚É£  Consulter la documentation"
    echo "4Ô∏è‚É£  Valider la solution Ansible"
    echo "5Ô∏è‚É£  Monitoring et maintenance"
    echo "6Ô∏è‚É£  Aide et support"
    echo "0Ô∏è‚É£  Quitter"
    echo ""
    echo -n "Votre choix (0-6): "
}

# Fonction pour le d√©marrage rapide
quick_start() {
    print_section "üöÄ D√©marrage rapide - D√©veloppement local"
    echo ""
    echo "Nous allons d√©marrer l'application en mode d√©veloppement..."
    echo ""
    
    if [ ! -f "tp/.env" ]; then
        print_warning "Fichier .env non trouv√©. Cr√©ation √† partir du template..."
        if [ -f "tp/.env.example" ]; then
            cp tp/.env.example tp/.env
            print_success "Fichier .env cr√©√© ! V√©rifiez la configuration."
        else
            print_error "Template .env.example non trouv√© !"
            return 1
        fi
    fi
    
    cd tp
    print_section "D√©marrage de l'application..."
    make start-simple
    
    print_success "Application d√©marr√©e !"
    echo ""
    echo "üåê Acc√®s √† l'application : http://localhost:3000"
    echo "üè• Health check : http://localhost:3000/health"
    echo ""
    echo "üìä Pour voir les logs : make logs"
    echo "üõë Pour arr√™ter : make stop"
}

# Fonction pour le d√©ploiement Ansible
ansible_deployment() {
    print_section "üéØ D√©ploiement production avec Ansible"
    echo ""
    
    if [ ! -d "deployment/ansible" ]; then
        print_error "Dossier deployment/ansible non trouv√© !"
        return 1
    fi
    
    cd deployment/ansible
    
    print_warning "Configuration requise avant le d√©ploiement :"
    echo "1. √âditez le fichier vars/deploy.yml avec vos param√®tres"
    echo "2. Configurez l'inventaire inventory.ini avec vos serveurs"
    echo "3. Assurez-vous que les cl√©s SSH sont configur√©es"
    echo ""
    
    echo -n "Configuration termin√©e ? (y/N): "
    read -r confirm
    
    if [[ $confirm =~ ^[Yy]$ ]]; then
        print_section "Lancement du d√©ploiement..."
        make deploy
        print_success "D√©ploiement termin√© !"
    else
        print_warning "Consultez le guide : deployment/ansible/GUIDE-DEPLOIEMENT.md"
    fi
}

# Fonction pour la documentation
show_documentation() {
    print_section "üìö Documentation disponible"
    echo ""
    echo "üìñ Guides principaux :"
    echo "   ‚Ä¢ README.md - Documentation g√©n√©rale"
    echo "   ‚Ä¢ docs/README.md - Hub central de documentation"
    echo "   ‚Ä¢ deployment/ansible/GUIDE-DEPLOIEMENT.md - Guide Ansible complet"
    echo "   ‚Ä¢ deployment/ansible/README-INFRASTRUCTURE.md - Configuration infrastructure"
    echo ""
    echo "üõ†Ô∏è Outils et commandes :"
    echo "   ‚Ä¢ deployment/ansible/Makefile - Interface de commandes"
    echo "   ‚Ä¢ deployment/ansible/validate-solution.sh - Validation automatique"
    echo ""
    echo "üåê Ressources en ligne :"
    echo "   ‚Ä¢ Documentation Ansible : https://docs.ansible.com/"
    echo "   ‚Ä¢ Best practices Docker : https://docs.docker.com/develop/best-practices/"
    echo ""
    
    echo -n "Ouvrir le hub de documentation ? (y/N): "
    read -r open_docs
    
    if [[ $open_docs =~ ^[Yy]$ ]]; then
        if command -v code &> /dev/null; then
            code docs/README.md
        else
            cat docs/README.md
        fi
    fi
}

# Fonction pour valider la solution
validate_solution() {
    print_section "‚úÖ Validation de la solution Ansible"
    echo ""
    
    if [ ! -f "deployment/ansible/validate-solution.sh" ]; then
        print_error "Script de validation non trouv√© !"
        return 1
    fi
    
    cd deployment/ansible
    chmod +x validate-solution.sh
    ./validate-solution.sh
}

# Fonction pour le monitoring
monitoring_maintenance() {
    print_section "üìä Monitoring et maintenance"
    echo ""
    echo "üîç Commandes disponibles :"
    echo "   ‚Ä¢ make health-check - V√©rification de sant√© compl√®te"
    echo "   ‚Ä¢ make logs - Consultation des logs"
    echo "   ‚Ä¢ make backup - Sauvegarde manuelle"
    echo "   ‚Ä¢ make clean-old-images - Nettoyage des anciennes images"
    echo "   ‚Ä¢ make monitor-services - Monitoring en temps r√©el"
    echo ""
    
    if [ -d "deployment/ansible" ]; then
        cd deployment/ansible
        echo -n "Lancer une v√©rification de sant√© ? (y/N): "
        read -r health_check
        
        if [[ $health_check =~ ^[Yy]$ ]]; then
            make health-check
        fi
    fi
}

# Fonction d'aide
show_help() {
    print_section "üÜò Aide et support"
    echo ""
    echo "üìã Structure du projet :"
    echo "   ‚Ä¢ tp/ - Code source de l'application"
    echo "   ‚Ä¢ deployment/ - Configuration de d√©ploiement"
    echo "   ‚Ä¢ docs/ - Documentation centralis√©e"
    echo "   ‚Ä¢ scripts/ - Scripts utilitaires"
    echo ""
    echo "üîß Commandes principales :"
    echo "   ‚Ä¢ Local : cd tp && make start-simple"
    echo "   ‚Ä¢ Production : cd deployment/ansible && make deploy"
    echo "   ‚Ä¢ Documentation : cat docs/README.md"
    echo ""
    echo "üêõ En cas de probl√®me :"
    echo "   ‚Ä¢ V√©rifiez les logs : make logs"
    echo "   ‚Ä¢ Validez la solution : ./deployment/ansible/validate-solution.sh"
    echo "   ‚Ä¢ Consultez la documentation : docs/README.md"
    echo ""
    echo "üìû Support :"
    echo "   ‚Ä¢ GitHub Issues : https://github.com/votre-repo/issues"
    echo "   ‚Ä¢ Documentation : deployment/ansible/GUIDE-DEPLOIEMENT.md"
}

# Fonction principale
main() {
    clear
    print_header
    
    # V√©rification des pr√©requis
    if ! check_requirements; then
        echo ""
        print_warning "Installez les pr√©requis manquants avant de continuer."
        echo "Consultez la documentation pour les instructions d'installation."
        exit 1
    fi
    
    echo ""
    
    while true; do
        show_menu
        read -r choice
        echo ""
        
        case $choice in
            1) quick_start ;;
            2) ansible_deployment ;;
            3) show_documentation ;;
            4) validate_solution ;;
            5) monitoring_maintenance ;;
            6) show_help ;;
            0) 
                print_success "Au revoir ! üëã"
                exit 0
                ;;
            *)
                print_error "Choix invalide. Veuillez s√©lectionner une option valide."
                ;;
        esac
        
        echo ""
        echo -n "Appuyez sur Entr√©e pour continuer..."
        read -r
        echo ""
    done
}

# Lancement du script
main "$@"
