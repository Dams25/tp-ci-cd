# ==============================================================================
# DOCKER-COMPOSE PRODUCTION - TO-DO LIST APPLICATION
# ==============================================================================

version: '3.8'

services:
  # Application Node.js TO-DO List
  todo-app:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile
      target: production
    container_name: todo-app-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=4000
      - START_MESSAGE=Production TO-DO App Started
      - MONGODB_URI=mongodb://mongo:27017/todolist
    ports:
      - "4000:4000"
    depends_on:
      - mongo
    networks:
      - todo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - /app/node_modules  # Volume anonyme pour éviter l'écrasement

  # Base de données MongoDB
  mongo:
    image: mongo:7-jammy
    container_name: mongo-prod
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=secretpassword
      - MONGO_INITDB_DATABASE=todolist
    ports:
      - "27017:27017"
    networks:
      - todo-network
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Reverse Proxy Nginx (optionnel)
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - todo-app
    networks:
      - todo-network

networks:
  todo-network:
    driver: bridge

volumes:
  mongo-data:
    driver: local
  mongo-config:
    driver: local
