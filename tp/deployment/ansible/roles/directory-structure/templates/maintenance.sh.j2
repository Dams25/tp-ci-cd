#!/bin/bash
# ==============================================================================
# SCRIPT DE MAINTENANCE - {{ app_name | upper }}
# G√©n√©r√© automatiquement par Ansible
# ==============================================================================

set -e

# Variables
APP_DIR="{{ app_directory }}"
DOCKER_USER="{{ docker_user }}"
APP_NAME="{{ app_name }}"

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Nettoyage Docker
cleanup_docker() {
    log_info "üßπ Nettoyage Docker..."
    
    # Suppression des conteneurs arr√™t√©s
    docker container prune -f
    
    # Suppression des images non utilis√©es
    docker image prune -f
    
    # Suppression des r√©seaux non utilis√©s
    docker network prune -f
    
    # Suppression des volumes non utilis√©s (attention !)
    # docker volume prune -f
    
    log_success "‚úÖ Nettoyage Docker termin√©"
}

# Rotation des logs
rotate_logs() {
    log_info "üìù Rotation des logs..."
    
    LOG_DIR="/var/log/{{ app_name }}"
    
    if [ -d "$LOG_DIR" ]; then
        # Archiver les logs de plus de 7 jours
        find "$LOG_DIR" -name "*.log" -mtime +7 -exec gzip {} \;
        
        # Supprimer les logs archiv√©s de plus de 30 jours
        find "$LOG_DIR" -name "*.gz" -mtime +30 -delete
        
        log_success "‚úÖ Rotation des logs termin√©e"
    else
        log_warning "‚ö†Ô∏è  R√©pertoire de logs non trouv√©: $LOG_DIR"
    fi
}

# V√©rification de l'espace disque
check_disk_space() {
    log_info "üíæ V√©rification de l'espace disque..."
    
    # Afficher l'espace disque
    df -h
    
    # V√©rifier si l'espace libre est inf√©rieur √† 10%
    DISK_USAGE=$(df "$APP_DIR" | awk 'NR==2 {print $5}' | sed 's/%//')
    
    if [ "$DISK_USAGE" -gt 90 ]; then
        log_warning "‚ö†Ô∏è  ATTENTION: Espace disque faible ($DISK_USAGE% utilis√©)"
        echo "üí° Conseils:"
        echo "   - Lancez le nettoyage Docker: ./maintenance.sh cleanup"
        echo "   - V√©rifiez les logs: du -sh /var/log/*"
        echo "   - V√©rifiez les sauvegardes: du -sh $APP_DIR/backups/*"
    else
        log_success "‚úÖ Espace disque OK ($DISK_USAGE% utilis√©)"
    fi
}

# V√©rification de la sant√© des conteneurs
check_containers_health() {
    log_info "üè• V√©rification de la sant√© des conteneurs..."
    
    cd "$APP_DIR"
    
    # V√©rifier les conteneurs
    CONTAINERS=$(docker-compose ps -q)
    
    for container in $CONTAINERS; do
        STATUS=$(docker inspect --format='{{.State.Health.Status}}' $container 2>/dev/null || echo "no-healthcheck")
        NAME=$(docker inspect --format='{{.Name}}' $container | sed 's/\///')
        
        case $STATUS in
            healthy)
                log_success "‚úÖ $NAME: Healthy"
                ;;
            unhealthy)
                log_warning "‚ö†Ô∏è  $NAME: Unhealthy"
                ;;
            starting)
                log_info "üîÑ $NAME: Starting..."
                ;;
            no-healthcheck)
                log_info "üìã $NAME: No health check configured"
                ;;
            *)
                log_warning "‚ùì $NAME: Unknown status ($STATUS)"
                ;;
        esac
    done
}

# Mise √† jour des images
update_images() {
    log_info "üì¶ V√©rification des mises √† jour d'images..."
    
    cd "$APP_DIR"
    
    # Pull des nouvelles versions
    docker-compose pull
    
    log_success "‚úÖ V√©rification des images termin√©e"
}

# Sauvegarde automatique
auto_backup() {
    log_info "üíæ Sauvegarde automatique..."
    
    if [ -f "$APP_DIR/scripts/backup.sh" ]; then
        "$APP_DIR/scripts/backup.sh"
    else
        log_warning "‚ö†Ô∏è  Script de sauvegarde non trouv√©"
    fi
}

# Rapport de statut
generate_report() {
    log_info "üìä G√©n√©ration du rapport de statut..."
    
    REPORT_FILE="/tmp/maintenance_report_$(date +%Y%m%d_%H%M%S).txt"
    
    {
        echo "# RAPPORT DE MAINTENANCE - $(date)"
        echo "======================================"
        echo ""
        echo "## Syst√®me"
        uname -a
        echo ""
        echo "## Espace disque"
        df -h
        echo ""
        echo "## M√©moire"
        free -h
        echo ""
        echo "## Docker"
        docker version --format '{{.Server.Version}}'
        echo ""
        echo "## Conteneurs"
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        echo ""
        echo "## Images"
        docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
        echo ""
    } > "$REPORT_FILE"
    
    log_success "‚úÖ Rapport g√©n√©r√©: $REPORT_FILE"
}

# Fonction d'aide
show_help() {
    echo "Usage: $0 [cleanup|logs|disk|health|update|backup|report|all|help]"
    echo ""
    echo "Commands:"
    echo "  cleanup   - Nettoyage Docker"
    echo "  logs      - Rotation des logs"
    echo "  disk      - V√©rification espace disque"
    echo "  health    - V√©rification sant√© conteneurs"
    echo "  update    - Mise √† jour des images"
    echo "  backup    - Sauvegarde automatique"
    echo "  report    - G√©n√©ration d'un rapport"
    echo "  all       - Toutes les t√¢ches de maintenance"
    echo "  help      - Afficher cette aide"
}

# Maintenance compl√®te
maintenance_all() {
    log_info "üîß Maintenance compl√®te..."
    
    check_disk_space
    check_containers_health
    cleanup_docker
    rotate_logs
    update_images
    auto_backup
    generate_report
    
    log_success "‚úÖ Maintenance compl√®te termin√©e"
}

# Navigation par commande
case "${1:-help}" in
    cleanup)
        cleanup_docker
        ;;
    logs)
        rotate_logs
        ;;
    disk)
        check_disk_space
        ;;
    health)
        check_containers_health
        ;;
    update)
        update_images
        ;;
    backup)
        auto_backup
        ;;
    report)
        generate_report
        ;;
    all)
        maintenance_all
        ;;
    help|*)
        show_help
        ;;
esac
