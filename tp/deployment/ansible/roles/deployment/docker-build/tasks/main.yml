# ============================================
# ROLE: docker-build
# DESCRIPTION: Build optimis√© et taggage des images Docker
# VERSION: 1.0
# ============================================

---
- name: "üê≥ D√©but du build Docker"
  debug:
    msg: "Build de l'image {{ docker.image_name }}:{{ app_version }} pour {{ app_environment }}"

# V√©rification des pr√©requis Docker
- name: "üîç V√©rification de Docker et Docker Compose"
  block:
    - name: "V√©rification statut Docker"
      systemd:
        name: docker
        state: started
        enabled: true
      become: true

    - name: "Test de la connectivit√© Docker"
      command: docker version
      register: docker_version
      changed_when: false

    - name: "V√©rification de l'espace disque"
      shell: df -h {{ app_directory }} | tail -1 | awk '{print $5}' | sed 's/%//'
      register: disk_usage
      changed_when: false

    - name: "Validation de l'espace disque disponible"
      assert:
        that:
          - disk_usage.stdout | int < 85
        fail_msg: "Espace disque insuffisant ({{ disk_usage.stdout }}% utilis√©)"
        success_msg: "Espace disque suffisant ({{ disk_usage.stdout }}% utilis√©)"
  tags:
    - docker-build
    - validation

# Nettoyage pr√©ventif
- name: "üßπ Nettoyage pr√©ventif des images orphelines"
  block:
    - name: "Suppression des images orphelines"
      shell: docker image prune -f
      register: prune_images
      changed_when: "'deleted' in prune_images.stdout"

    - name: "Suppression des containers arr√™t√©s"
      shell: docker container prune -f
      register: prune_containers
      changed_when: "'deleted' in prune_containers.stdout"

    - name: "Nettoyage du cache de build"
      shell: docker builder prune -f
      register: prune_cache
      changed_when: "'deleted' in prune_cache.stdout"
      when: docker.cache_cleanup | default(true)
  tags:
    - docker-build
    - cleanup

# Sauvegarde de l'image pr√©c√©dente
- name: "üíæ Sauvegarde de l'image pr√©c√©dente"
  block:
    - name: "V√©rification de l'existence de l'image actuelle"
      shell: docker images {{ docker.image_name }}:{{ docker.previous_tag | default('latest') }} -q
      register: current_image_exists
      changed_when: false
      failed_when: false

    - name: "Tag de sauvegarde de l'image pr√©c√©dente"
      shell: >
        docker tag {{ docker.image_name }}:{{ docker.previous_tag | default('latest') }}
        {{ docker.image_name }}:backup-{{ ansible_date_time.epoch }}
      when: current_image_exists.stdout != ""
      register: backup_tagged

    - name: "Export de l'image de sauvegarde (optionnel)"
      shell: >
        docker save {{ docker.image_name }}:backup-{{ ansible_date_time.epoch }}
        | gzip > {{ app_directory }}/backup/images/{{ docker.image_name }}-backup-{{ ansible_date_time.epoch }}.tar.gz
      when: 
        - backup_tagged is defined
        - backup_tagged.rc == 0
        - docker.export_backup | default(false)
  tags:
    - docker-build
    - backup

# Build de l'image avec cache optimis√©
- name: "üî® Build de l'image Docker optimis√©e"
  block:
    - name: "Calcul du contexte de build"
      set_fact:
        build_context: "{{ app_directory }}/source"
        dockerfile_path: "{{ app_directory }}/source/Dockerfile"

    - name: "Build avec cache multi-stage"
      shell: |
        cd {{ build_context }}
        docker build \
          --file {{ dockerfile_path }} \
          --tag {{ docker.image_name }}:{{ app_version }} \
          --tag {{ docker.image_name }}:latest \
          --build-arg NODE_ENV={{ app_environment }} \
          --build-arg APP_VERSION={{ app_version }} \
          --build-arg BUILD_DATE={{ ansible_date_time.iso8601 }} \
          {% if docker.use_cache | default(true) %}--cache-from {{ docker.image_name }}:latest{% endif %} \
          {% if docker.target_stage is defined %}--target {{ docker.target_stage }}{% endif %} \
          {% if docker.build_args is defined %}
          {% for arg_name, arg_value in docker.build_args.items() %}--build-arg {{ arg_name }}={{ arg_value }} {% endfor %}
          {% endif %}
          --label "version={{ app_version }}" \
          --label "environment={{ app_environment }}" \
          --label "build-date={{ ansible_date_time.iso8601 }}" \
          --label "git-commit={{ git_commit | default('unknown') }}" \
          .
      register: docker_build_result
      failed_when: docker_build_result.rc != 0

    - name: "Validation de la cr√©ation de l'image"
      shell: docker images {{ docker.image_name }}:{{ app_version }} -q
      register: new_image_id
      failed_when: new_image_id.stdout == ""
  tags:
    - docker-build
    - build

# Tests de s√©curit√© de l'image
- name: "üîí Scan de s√©curit√© de l'image"
  block:
    - name: "Installation de dive (si n√©cessaire)"
      shell: |
        if ! command -v dive &> /dev/null; then
          wget -q https://github.com/wagoodman/dive/releases/download/v0.10.0/dive_0.10.0_linux_amd64.deb
          sudo dpkg -i dive_0.10.0_linux_amd64.deb
          rm dive_0.10.0_linux_amd64.deb
        fi
      when: docker.security_scan | default(false)
      become: true

    - name: "Analyse de l'efficacit√© de l'image"
      shell: dive {{ docker.image_name }}:{{ app_version }} --ci
      register: dive_analysis
      when: docker.security_scan | default(false)
      changed_when: false

    - name: "V√©rification de la taille de l'image"
      shell: docker images {{ docker.image_name }}:{{ app_version }} --format "table {{.Size}}" | tail -1
      register: image_size
      changed_when: false

    - name: "Validation de la taille de l'image"
      assert:
        that:
          - "not (image_size.stdout | regex_search('GB') and (image_size.stdout | regex_replace('GB', '') | float) > (docker.max_size_gb | default(2)))"
        fail_msg: "Image trop volumineuse: {{ image_size.stdout }}"
        success_msg: "Taille d'image acceptable: {{ image_size.stdout }}"
  tags:
    - docker-build
    - security

# Test fonctionnel rapide de l'image
- name: "üß™ Test fonctionnel de l'image"
  block:
    - name: "Test de d√©marrage de l'image"
      shell: |
        docker run --rm -d \
          --name {{ docker.image_name }}-test-{{ ansible_date_time.epoch }} \
          -e NODE_ENV=test \
          -p {{ docker.test_port | default(3001) }}:3000 \
          {{ docker.image_name }}:{{ app_version }}
      register: test_container

    - name: "Attente du d√©marrage"
      wait_for:
        port: "{{ docker.test_port | default(3001) }}"
        delay: 5
        timeout: 30

    - name: "Test de sant√© de l'application"
      uri:
        url: "http://localhost:{{ docker.test_port | default(3001) }}/health"
        method: GET
        timeout: 10
      register: health_check
      failed_when: health_check.status != 200

    - name: "Arr√™t du container de test"
      shell: docker stop {{ docker.image_name }}-test-{{ ansible_date_time.epoch }}
      when: test_container.rc == 0
  rescue:
    - name: "Nettoyage en cas d'√©chec du test"
      shell: docker stop {{ docker.image_name }}-test-{{ ansible_date_time.epoch }} || true
      ignore_errors: true
  tags:
    - docker-build
    - test

# Taggage avanc√© et versioning
- name: "üè∑Ô∏è Taggage et versioning avanc√©"
  block:
    - name: "Tag par environnement"
      shell: docker tag {{ docker.image_name }}:{{ app_version }} {{ docker.image_name }}:{{ app_environment }}-latest

    - name: "Tag par date"
      shell: docker tag {{ docker.image_name }}:{{ app_version }} {{ docker.image_name }}:{{ ansible_date_time.date }}

    - name: "Tag s√©mantique (si fourni)"
      shell: docker tag {{ docker.image_name }}:{{ app_version }} {{ docker.image_name }}:{{ semantic_version }}
      when: semantic_version is defined

    - name: "Push vers registry (si configur√©)"
      block:
        - name: "Login au registry"
          shell: echo "{{ docker.registry.password }}" | docker login {{ docker.registry.url }} -u {{ docker.registry.username }} --password-stdin
          when: docker.registry is defined

        - name: "Tag pour le registry"
          shell: docker tag {{ docker.image_name }}:{{ app_version }} {{ docker.registry.url }}/{{ docker.image_name }}:{{ app_version }}
          when: docker.registry is defined

        - name: "Push de l'image"
          shell: docker push {{ docker.registry.url }}/{{ docker.image_name }}:{{ app_version }}
          when: docker.registry is defined
      when: docker.push_to_registry | default(false)
  tags:
    - docker-build
    - versioning

# Nettoyage post-build
- name: "üßπ Nettoyage post-build"
  block:
    - name: "Suppression des images de d√©veloppement"
      shell: docker rmi $(docker images -f "dangling=true" -q) || true
      changed_when: false

    - name: "Conservation des N derni√®res versions"
      shell: |
        images=$(docker images {{ docker.image_name }} --format "{{.Tag}}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | head -n -{{ docker.keep_versions | default(3) }})
        for img in $images; do
          docker rmi {{ docker.image_name }}:$img || true
        done
      when: docker.cleanup_old_versions | default(true)
  tags:
    - docker-build
    - cleanup

# Rapport de build
- name: "üìä G√©n√©ration du rapport de build"
  template:
    src: build-report.txt.j2
    dest: "{{ app_directory }}/logs/build-report-{{ ansible_date_time.epoch }}.txt"
    owner: "{{ docker_user }}"
    group: "{{ docker_group }}"
    mode: '0644'
  vars:
    build_success: "{{ docker_build_result.rc == 0 }}"
    image_id: "{{ new_image_id.stdout }}"
    image_size: "{{ image_size.stdout }}"
    health_status: "{{ health_check.status | default('failed') }}"
  tags:
    - docker-build
    - reporting

- name: "‚úÖ Build Docker termin√© avec succ√®s"
  debug:
    msg: "Image {{ docker.image_name }}:{{ app_version }} cr√©√©e et test√©e avec succ√®s"
