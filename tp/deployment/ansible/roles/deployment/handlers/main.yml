# ============================================
# HANDLERS: Gestionnaires d'√©v√©nements pour le d√©ploiement
# DESCRIPTION: Actions d√©clench√©es par les changements
# VERSION: 1.0
# ============================================

---
# Handlers pour Docker
- name: docker build required
  debug:
    msg: "üî® Build Docker requis - Dockerfile modifi√©"
  listen: docker build required

- name: services restart required
  debug:
    msg: "üîÑ Red√©marrage des services requis - Configuration modifi√©e"
  listen: services restart required

- name: restart nginx
  systemd:
    name: nginx
    state: restarted
  become: true
  listen: restart nginx

# Handlers pour les rollbacks
- name: trigger rollback
  include_tasks: ../tasks/rollback.yml
  vars:
    rollback_reason: "{{ rollback_reason | default('Deployment failed') }}"
    rollback_to_version: "{{ rollback_to_version | default(previous_version) }}"
  listen: trigger rollback

- name: emergency rollback
  block:
    - name: "üö® Rollback d'urgence d√©clench√©"
      debug:
        msg: "D√©clenchement du rollback d'urgence: {{ rollback_reason | default('Critical failure detected') }}"
    
    - name: "Arr√™t imm√©diat des services d√©faillants"
      shell: |
        cd {{ app_directory }}
        docker-compose down --timeout 10
      ignore_errors: true
    
    - name: "Restauration de la version pr√©c√©dente"
      include_tasks: ../tasks/emergency-restore.yml
  listen: emergency rollback

# Handlers pour les notifications
- name: send deployment success notification
  block:
    - name: "üì¢ Notification de succ√®s Slack"
      uri:
        url: "{{ notifications.slack.webhook_url }}"
        method: POST
        body_format: json
        body:
          channel: "{{ notifications.slack.channel | default('#deployments') }}"
          username: "Ansible Deploy Bot"
          icon_emoji: ":rocket:"
          text: |
            üöÄ **D√©ploiement r√©ussi !**
            
            üìã **D√©tails:**
            ‚Ä¢ Application: {{ app_name }}
            ‚Ä¢ Version: {{ app_version }}
            ‚Ä¢ Environnement: {{ app_environment }}
            ‚Ä¢ Serveur: {{ ansible_host }}
            ‚Ä¢ Strat√©gie: {{ deployment.strategy }}
            ‚Ä¢ Timestamp: {{ ansible_date_time.iso8601 }}
            
            üåê **Acc√®s:** http://{{ ansible_host }}:{{ deployment.app_port | default(3000) }}
      when: 
        - notifications.slack.enabled | default(false)
        - notifications.slack.webhook_url is defined
      delegate_to: localhost
      ignore_errors: true

    - name: "üìß Notification de succ√®s par email"
      mail:
        to: "{{ notifications.email.recipients }}"
        subject: "‚úÖ [{{ app_environment | upper }}] D√©ploiement {{ app_name }} {{ app_version }} r√©ussi"
        body: |
          Le d√©ploiement de {{ app_name }} version {{ app_version }} s'est termin√© avec succ√®s.
          
          üìã D√©tails du d√©ploiement:
          ‚Ä¢ Environnement: {{ app_environment }}
          ‚Ä¢ Serveur: {{ ansible_host }}
          ‚Ä¢ Strat√©gie: {{ deployment.strategy }}
          ‚Ä¢ Timestamp: {{ ansible_date_time.iso8601 }}
          ‚Ä¢ Dur√©e: {{ ansible_date_time.epoch | int - deployment_start_time | default(0) | int }}s
          
          üåê L'application est accessible √†:
          http://{{ ansible_host }}:{{ deployment.app_port | default(3000) }}
          
          üìä Monitoring:
          ‚Ä¢ Logs: {{ app_directory }}/logs/
          ‚Ä¢ Health check: http://{{ ansible_host }}:{{ deployment.app_port | default(3000) }}/health
          
          Cordialement,
          Syst√®me de d√©ploiement automatis√© Ansible
        charset: utf8
      when: 
        - notifications.email.enabled | default(false)
        - notifications.email.recipients is defined
      delegate_to: localhost
      ignore_errors: true
  listen: send deployment success notification

- name: send deployment failure notification
  block:
    - name: "üö® Notification d'√©chec Slack"
      uri:
        url: "{{ notifications.slack.webhook_url }}"
        method: POST
        body_format: json
        body:
          channel: "{{ notifications.slack.channel | default('#deployments') }}"
          username: "Ansible Deploy Bot"
          icon_emoji: ":warning:"
          text: |
            üö® **√âCHEC du d√©ploiement !**
            
            ‚ùå **Erreur:**
            ‚Ä¢ Application: {{ app_name }}
            ‚Ä¢ Version: {{ app_version }}
            ‚Ä¢ Environnement: {{ app_environment }}
            ‚Ä¢ Serveur: {{ ansible_host }}
            ‚Ä¢ Erreur: {{ ansible_failed_result.msg | default('Erreur inconnue') }}
            ‚Ä¢ Timestamp: {{ ansible_date_time.iso8601 }}
            
            üîß **Actions recommand√©es:**
            ‚Ä¢ V√©rifier les logs: {{ app_directory }}/logs/
            ‚Ä¢ Rollback automatique: {{ 'Activ√©' if rollback.auto_rollback else 'D√©sactiv√©' }}
            ‚Ä¢ Contact: {{ notifications.emergency_contact | default('√âquipe DevOps') }}
      when: 
        - notifications.slack.enabled | default(false)
        - notifications.slack.webhook_url is defined
      delegate_to: localhost
      ignore_errors: true

    - name: "üìß Notification d'√©chec par email"
      mail:
        to: "{{ notifications.email.emergency_recipients | default(notifications.email.recipients) }}"
        subject: "üö® [{{ app_environment | upper }}] √âCHEC d√©ploiement {{ app_name }} {{ app_version }}"
        body: |
          ‚ö†Ô∏è  ALERTE: Le d√©ploiement de {{ app_name }} version {{ app_version }} a √©chou√©.
          
          ‚ùå D√©tails de l'erreur:
          ‚Ä¢ Environnement: {{ app_environment }}
          ‚Ä¢ Serveur: {{ ansible_host }}
          ‚Ä¢ Timestamp: {{ ansible_date_time.iso8601 }}
          ‚Ä¢ Erreur: {{ ansible_failed_result.msg | default('Erreur inconnue') }}
          
          üìã Actions prises:
          ‚Ä¢ Rollback automatique: {{ 'Activ√©' if rollback.auto_rollback else 'D√©sactiv√©' }}
          ‚Ä¢ Logs disponibles: {{ app_directory }}/logs/
          
          üîß Actions requises:
          1. V√©rifier les logs d'erreur
          2. Analyser la cause du probl√®me
          3. Corriger et relancer le d√©ploiement
          
          üìû Contact d'urgence: {{ notifications.emergency_contact | default('√âquipe DevOps') }}
          
          Cordialement,
          Syst√®me de d√©ploiement automatis√© Ansible
        charset: utf8
      when: 
        - notifications.email.enabled | default(false)
        - notifications.email.emergency_recipients is defined or notifications.email.recipients is defined
      delegate_to: localhost
      ignore_errors: true
  listen: send deployment failure notification

- name: send health alert
  block:
    - name: "üè• Alerte de sant√© Slack"
      uri:
        url: "{{ notifications.slack.webhook_url }}"
        method: POST
        body_format: json
        body:
          channel: "{{ notifications.slack.channel | default('#alerts') }}"
          username: "Health Monitor Bot"
          icon_emoji: ":warning:"
          text: |
            üè• **ALERTE de sant√© d√©tect√©e !**
            
            ‚ö†Ô∏è  **Probl√®me:**
            ‚Ä¢ Application: {{ app_name }}
            ‚Ä¢ Version: {{ app_version }}
            ‚Ä¢ Serveur: {{ ansible_host }}
            ‚Ä¢ Score de sant√©: {{ health_score | default('N/A') }}%
            ‚Ä¢ Timestamp: {{ ansible_date_time.iso8601 }}
            
            üìä **M√©triques syst√®me:**
            ‚Ä¢ CPU: {{ cpu_usage.stdout | default('N/A') }}%
            ‚Ä¢ M√©moire: {{ memory_usage.stdout | default('N/A') }}%
            ‚Ä¢ Disque: {{ disk_usage.stdout | default('N/A') }}%
            
            üîç **Actions recommand√©es:**
            ‚Ä¢ V√©rifier les logs d'application
            ‚Ä¢ Contr√¥ler les ressources syst√®me
            ‚Ä¢ Analyser les m√©triques d√©taill√©es
      when: 
        - notifications.slack.enabled | default(false)
        - notifications.slack.webhook_url is defined
      delegate_to: localhost
      ignore_errors: true

    - name: "üîî Enregistrement de l'alerte dans les logs"
      lineinfile:
        path: "{{ app_directory }}/logs/alerts.log"
        line: "{{ ansible_date_time.iso8601 }} - HEALTH_ALERT - Score: {{ health_score | default('N/A') }}% - {{ ansible_failed_result.msg | default('Health check failed') }}"
        create: true
      ignore_errors: true
  listen: send health alert

# Handlers pour la sauvegarde d'urgence
- name: emergency backup
  block:
    - name: "üíæ Sauvegarde d'urgence des donn√©es"
      shell: |
        mkdir -p {{ app_directory }}/backup/emergency/{{ ansible_date_time.epoch }}
        
        # Sauvegarde de la base de donn√©es
        docker exec $(docker-compose -f {{ app_directory }}/docker-compose.yml ps -q mongo) \
        mongodump --db {{ secrets.mongodb.database }} --archive | \
        gzip > {{ app_directory }}/backup/emergency/{{ ansible_date_time.epoch }}/mongodb-emergency.gz
        
        # Sauvegarde des configurations
        cp -r {{ app_directory }}/.env {{ app_directory }}/backup/emergency/{{ ansible_date_time.epoch }}/
        cp -r {{ app_directory }}/docker-compose.yml {{ app_directory }}/backup/emergency/{{ ansible_date_time.epoch }}/
        
        # Sauvegarde des logs critiques
        cp -r {{ app_directory }}/logs {{ app_directory }}/backup/emergency/{{ ansible_date_time.epoch }}/
      ignore_errors: true

    - name: "üìù Enregistrement de la sauvegarde d'urgence"
      lineinfile:
        path: "{{ app_directory }}/logs/emergency-backups.log"
        line: "{{ ansible_date_time.iso8601 }} - EMERGENCY_BACKUP - Location: backup/emergency/{{ ansible_date_time.epoch }}"
        create: true
  listen: emergency backup

# Handlers pour le monitoring
- name: update monitoring dashboards
  block:
    - name: "üìä Mise √† jour des dashboards Grafana"
      template:
        src: grafana-dashboard.json.j2
        dest: "{{ app_directory }}/monitoring/grafana/dashboards/{{ app_name }}-dashboard.json"
        owner: "{{ docker_user }}"
        group: "{{ docker_group }}"
        mode: '0644'
      when: monitoring.grafana_enabled | default(false)

    - name: "üîî Rechargement des r√®gles d'alerte Prometheus"
      uri:
        url: "{{ monitoring.prometheus_url }}/-/reload"
        method: POST
        timeout: 10
      when: monitoring.prometheus_enabled | default(false)
      ignore_errors: true
  listen: update monitoring dashboards

# Handlers pour les certificats SSL
- name: renew ssl certificates
  block:
    - name: "üîí Renouvellement des certificats SSL"
      shell: |
        if command -v certbot &> /dev/null; then
          certbot renew --quiet --no-self-upgrade
        fi
      become: true
      when: nginx.ssl_enabled | default(false)

    - name: "üîÑ Red√©marrage de nginx apr√®s renouvellement SSL"
      systemd:
        name: nginx
        state: restarted
      become: true
      when: nginx.ssl_enabled | default(false)
  listen: renew ssl certificates

# Handlers pour les m√©triques
- name: export deployment metrics
  block:
    - name: "üìà Export des m√©triques vers Prometheus"
      copy:
        content: |
          # HELP deployment_success Indicates if deployment was successful
          # TYPE deployment_success gauge
          deployment_success{app="{{ app_name }}",version="{{ app_version }}",environment="{{ app_environment }}"} 1
          
          # HELP deployment_duration_seconds Duration of deployment in seconds
          # TYPE deployment_duration_seconds gauge
          deployment_duration_seconds{app="{{ app_name }}",version="{{ app_version }}",environment="{{ app_environment }}"} {{ ansible_date_time.epoch | int - deployment_start_time | default(0) | int }}
          
          # HELP deployment_timestamp Timestamp of last deployment
          # TYPE deployment_timestamp gauge
          deployment_timestamp{app="{{ app_name }}",version="{{ app_version }}",environment="{{ app_environment }}"} {{ ansible_date_time.epoch }}
        dest: "{{ app_directory }}/monitoring/metrics/deployment.prom"
        owner: "{{ docker_user }}"
        group: "{{ docker_group }}"
        mode: '0644'
      when: monitoring.prometheus_enabled | default(false)

    - name: "üìä Envoi des m√©triques vers InfluxDB"
      uri:
        url: "{{ monitoring.influxdb_url }}/write?db={{ monitoring.influxdb_database }}"
        method: POST
        body: |
          deployment,app={{ app_name }},version={{ app_version }},environment={{ app_environment }},host={{ ansible_hostname }} success=1,duration={{ ansible_date_time.epoch | int - deployment_start_time | default(0) | int }}
        headers:
          Content-Type: "application/x-www-form-urlencoded"
      when: monitoring.influxdb_enabled | default(false)
      ignore_errors: true
  listen: export deployment metrics

# Handler pour la validation post-d√©ploiement
- name: post deployment validation
  block:
    - name: "‚úÖ Validation finale du d√©ploiement"
      uri:
        url: "http://localhost:{{ deployment.app_port | default(3000) }}/health"
        method: GET
        timeout: 30
        status_code: 200
      retries: 5
      delay: 10

    - name: "üìù Enregistrement de la validation"
      lineinfile:
        path: "{{ app_directory }}/logs/deployment-validations.log"
        line: "{{ ansible_date_time.iso8601 }} - VALIDATION_SUCCESS - {{ app_name }}:{{ app_version }} deployed successfully"
        create: true
  rescue:
    - name: "‚ùå √âchec de la validation post-d√©ploiement"
      debug:
        msg: "La validation post-d√©ploiement a √©chou√©"
      notify: trigger rollback
  listen: post deployment validation
