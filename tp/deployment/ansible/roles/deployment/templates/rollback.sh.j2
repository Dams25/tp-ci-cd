#!/bin/bash

# ============================================
# SCRIPT: Rollback automatique
# DESCRIPTION: Restauration rapide vers version pr√©c√©dente
# VERSION: 1.0
# ============================================

set -euo pipefail

# Configuration
APP_DIR="{{ app_directory }}"
APP_NAME="{{ app_name }}"
ROLLBACK_TO="${1:-{{ previous_version | default('latest') }}}"
REASON="${2:-Manual rollback}"
LOG_FILE="$APP_DIR/logs/rollback-$(date +%s).log"

# Fonctions utilitaires
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

error() {
    log "ERROR: $1" >&2
    exit 1
}

# Fonction de rollback
perform_rollback() {
    log "üîÑ D√©but du rollback vers $ROLLBACK_TO - Raison: $REASON"
    
    # 1. Sauvegarde d'urgence de l'√©tat actuel
    log "üíæ Sauvegarde d'urgence de l'√©tat actuel"
    backup_dir="$APP_DIR/backup/emergency/$(date +%s)"
    mkdir -p "$backup_dir"
    
    # Sauvegarde de la base de donn√©es
    if docker-compose -f "$APP_DIR/docker-compose.yml" ps | grep -q mongo; then
        docker exec $(docker-compose -f "$APP_DIR/docker-compose.yml" ps -q mongo) \
            mongodump --db {{ secrets.mongodb.database }} --archive | \
            gzip > "$backup_dir/mongodb-pre-rollback.gz"
        log "‚úÖ Base de donn√©es sauvegard√©e"
    fi
    
    # Sauvegarde des configurations
    cp "$APP_DIR/.env" "$backup_dir/" 2>/dev/null || true
    cp "$APP_DIR/docker-compose.yml" "$backup_dir/" 2>/dev/null || true
    
    # 2. Arr√™t des services actuels
    log "‚èπÔ∏è Arr√™t des services actuels"
    cd "$APP_DIR"
    docker-compose down --timeout 30 || true
    
    # 3. Restauration de la version pr√©c√©dente
    log "üîô Restauration vers la version $ROLLBACK_TO"
    
    # Recherche du point de restauration
    restore_point="$APP_DIR/backup/restore-point-$ROLLBACK_TO.json"
    if [[ -f "$restore_point" ]]; then
        log "üìã Point de restauration trouv√©: $restore_point"
        
        # Restauration des configurations
        if [[ -f "$APP_DIR/backup/env/.env-$ROLLBACK_TO" ]]; then
            cp "$APP_DIR/backup/env/.env-$ROLLBACK_TO" "$APP_DIR/.env"
            log "‚úÖ Variables d'environnement restaur√©es"
        fi
        
        if [[ -f "$APP_DIR/backup/compose/docker-compose-$ROLLBACK_TO.yml" ]]; then
            cp "$APP_DIR/backup/compose/docker-compose-$ROLLBACK_TO.yml" "$APP_DIR/docker-compose.yml"
            log "‚úÖ Configuration Docker Compose restaur√©e"
        fi
    else
        log "‚ö†Ô∏è Point de restauration non trouv√©, utilisation de la derni√®re sauvegarde disponible"
        latest_env=$(find "$APP_DIR/backup/env" -name ".env-*" -type f | sort | tail -1)
        latest_compose=$(find "$APP_DIR/backup/compose" -name "docker-compose-*.yml" -type f | sort | tail -1)
        
        [[ -f "$latest_env" ]] && cp "$latest_env" "$APP_DIR/.env"
        [[ -f "$latest_compose" ]] && cp "$latest_compose" "$APP_DIR/docker-compose.yml"
    fi
    
    # 4. V√©rification de l'image Docker
    log "üê≥ V√©rification de l'image Docker ${{ docker.image_name }}:$ROLLBACK_TO"
    if ! docker images | grep -q "${{ docker.image_name }}.*$ROLLBACK_TO"; then
        log "‚ö†Ô∏è Image $ROLLBACK_TO non trouv√©e localement, tentative de pull"
        docker pull "${{ docker.image_name }}:$ROLLBACK_TO" || {
            log "‚ùå Impossible de r√©cup√©rer l'image $ROLLBACK_TO"
            log "üîç Images disponibles:"
            docker images ${{ docker.image_name }} | tee -a "$LOG_FILE"
            
            # Utilisation de la derni√®re image disponible
            latest_image=$(docker images ${{ docker.image_name }} --format "table {{.Tag}}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -1)
            if [[ -n "$latest_image" ]]; then
                log "üîÑ Utilisation de l'image disponible: $latest_image"
                ROLLBACK_TO="$latest_image"
            else
                error "Aucune image de rollback disponible"
            fi
        }
    fi
    
    # 5. Mise √† jour du docker-compose avec la bonne version
    sed -i "s/{{ docker.image_name }}:.*/{{ docker.image_name }}:$ROLLBACK_TO/" "$APP_DIR/docker-compose.yml"
    
    # 6. Red√©marrage des services
    log "üöÄ Red√©marrage des services avec la version $ROLLBACK_TO"
    docker-compose up -d --force-recreate
    
    # 7. V√©rification de sant√©
    log "üè• V√©rification de sant√© post-rollback"
    sleep 10
    
    max_attempts=10
    attempt=1
    while [[ $attempt -le $max_attempts ]]; do
        if curl -sf "http://localhost:{{ deployment.app_port | default(3000) }}/health" >/dev/null 2>&1; then
            log "‚úÖ Service fonctionnel apr√®s $attempt tentative(s)"
            break
        fi
        
        log "‚è≥ Tentative $attempt/$max_attempts √©chou√©e, nouvelle tentative dans 10s"
        sleep 10
        ((attempt++))
    done
    
    if [[ $attempt -gt $max_attempts ]]; then
        error "‚ùå Le service ne r√©pond pas apr√®s rollback"
    fi
    
    # 8. Rapport de rollback
    log "üìä G√©n√©ration du rapport de rollback"
    cat > "$APP_DIR/logs/rollback-report-$(date +%s).txt" << EOF
RAPPORT DE ROLLBACK
==================

Date: $(date)
Version source: {{ app_version }}
Version cible: $ROLLBACK_TO
Raison: $REASON
Statut: SUCC√àS

D√©tails:
- Sauvegarde d'urgence: $backup_dir
- Log de rollback: $LOG_FILE
- Services red√©marr√©s: $(docker-compose ps --services)
- Health check: SUCC√àS

Actions recommand√©es:
1. V√©rifier le fonctionnement de l'application
2. Analyser la cause du probl√®me original
3. Planifier un nouveau d√©ploiement apr√®s correction
EOF

    log "üéâ Rollback termin√© avec succ√®s vers la version $ROLLBACK_TO"
}

# Fonction de notification
send_notification() {
    local status="$1"
    local message="$2"
    
    {% if notifications.slack.enabled | default(false) %}
    # Notification Slack
    curl -X POST "{{ notifications.slack.webhook_url }}" \
        -H "Content-Type: application/json" \
        -d "{
            \"channel\": \"{{ notifications.slack.channel | default('#deployments') }}\",
            \"username\": \"Rollback Bot\",
            \"icon_emoji\": \":rewind:\",
            \"text\": \"üîÑ **Rollback $status**\\n\\nüìã **D√©tails:**\\n‚Ä¢ Application: {{ app_name }}\\n‚Ä¢ Version: {{ app_version }} ‚Üí $ROLLBACK_TO\\n‚Ä¢ Raison: $REASON\\n‚Ä¢ Serveur: {{ ansible_host }}\\n‚Ä¢ Timestamp: $(date)\\n\\n$message\"
        }" 2>/dev/null || true
    {% endif %}
    
    {% if notifications.email.enabled | default(false) %}
    # Notification email
    {
        echo "Subject: [{{ app_environment | upper }}] Rollback {{ app_name }} - $status"
        echo "To: {{ notifications.email.recipients | join(',') }}"
        echo ""
        echo "Le rollback de {{ app_name }} s'est termin√© avec le statut: $status"
        echo ""
        echo "D√©tails:"
        echo "- Version source: {{ app_version }}"
        echo "- Version cible: $ROLLBACK_TO"
        echo "- Raison: $REASON"
        echo "- Serveur: {{ ansible_host }}"
        echo "- Timestamp: $(date)"
        echo ""
        echo "$message"
        echo ""
        echo "Log complet disponible: $LOG_FILE"
    } | sendmail {{ notifications.email.recipients | join(' ') }} 2>/dev/null || true
    {% endif %}
}

# Gestion des erreurs
trap 'send_notification "√âCHEC" "Le rollback a √©chou√©. V√©rifiez les logs: $LOG_FILE"' ERR

# Point d'entr√©e principal
main() {
    log "üîÑ D√©but du script de rollback"
    
    # V√©rifications pr√©liminaires
    [[ -d "$APP_DIR" ]] || error "R√©pertoire d'application non trouv√©: $APP_DIR"
    [[ -f "$APP_DIR/docker-compose.yml" ]] || error "Fichier docker-compose.yml non trouv√©"
    
    command -v docker >/dev/null || error "Docker non install√©"
    command -v docker-compose >/dev/null || error "Docker Compose non install√©"
    
    # Ex√©cution du rollback
    perform_rollback
    
    # Notification de succ√®s
    send_notification "SUCC√àS" "Le rollback vers la version $ROLLBACK_TO s'est termin√© avec succ√®s."
    
    log "üéâ Script de rollback termin√© avec succ√®s"
}

# V√©rification des arguments
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    case "${1:-}" in
        -h|--help)
            echo "Usage: $0 [VERSION] [REASON]"
            echo "  VERSION: Version vers laquelle effectuer le rollback (d√©faut: derni√®re disponible)"
            echo "  REASON:  Raison du rollback (d√©faut: 'Manual rollback')"
            exit 0
            ;;
        *)
            main "$@"
            ;;
    esac
fi
