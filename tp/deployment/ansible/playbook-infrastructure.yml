# ==============================================================================
# ANSIBLE PLAYBOOK - INFRASTRUCTURE DOCKER PRODUCTION
# Pr√©paration compl√®te d'un serveur Ubuntu/Debian pour d√©ploiement Docker
# ==============================================================================

---
- name: "üöÄ Infrastructure Docker Production - TodoList Application"
  hosts: docker_servers
  become: yes
  become_method: sudo
  gather_facts: yes
  
  vars_files:
    - vars/infrastructure.yml
    - vars/security.yml
  
  pre_tasks:
    - name: "üìã V√©rification du syst√®me d'exploitation"
      fail:
        msg: "‚ùå Ce playbook est compatible uniquement avec Ubuntu 20.04+/Debian 11+"
      when: 
        - ansible_distribution not in ['Ubuntu', 'Debian']
        - (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int < 20) or
          (ansible_distribution == 'Debian' and ansible_distribution_major_version|int < 11)
    
    - name: "üïí Affichage des informations syst√®me"
      debug:
        msg: |
          üñ•Ô∏è  Syst√®me: {{ ansible_distribution }} {{ ansible_distribution_version }}
          üèóÔ∏è  Architecture: {{ ansible_architecture }}
          üíæ M√©moire: {{ ansible_memory_mb.real.total }}MB
          üîß Utilisateur Docker: {{ docker_user }}
          üìÅ R√©pertoire application: {{ app_directory }}

  roles:
    - role: system-update
      when: update_system | default(true)
      tags: ['system', 'update']
    
    - role: docker-installation
      tags: ['docker', 'installation']
    
    - role: user-configuration
      tags: ['user', 'docker']
    
    - role: firewall-security
      when: firewall_enabled | default(true)
      tags: ['security', 'firewall']
    
    - role: directory-structure
      tags: ['directories', 'structure']
    
    - role: monitoring-tools
      when: monitoring_enabled | default(false)
      tags: ['monitoring', 'optional']
  
  post_tasks:
    - name: "‚úÖ V√©rification finale de l'installation Docker"
      command: docker --version
      register: docker_version_check
      become_user: "{{ docker_user }}"
      
    - name: "‚úÖ V√©rification Docker Compose"
      command: docker compose version
      register: docker_compose_check
      become_user: "{{ docker_user }}"
      
    - name: "üìä Affichage des versions install√©es"
      debug:
        msg: |
          üê≥ {{ docker_version_check.stdout }}
          üîß {{ docker_compose_check.stdout }}
          ‚úÖ Infrastructure pr√™te pour le d√©ploiement !
          
    - name: "üîÑ Test de fonctionnement Docker"
      docker_container:
        name: hello-world-test
        image: hello-world
        state: started
        auto_remove: yes
      become_user: "{{ docker_user }}"
      register: docker_test
      
    - name: "üßπ Nettoyage apr√®s test"
      command: docker system prune -f
      become_user: "{{ docker_user }}"
      when: docker_test is succeeded

  handlers:
    - name: restart docker
      systemd:
        name: docker
        state: restarted
        enabled: yes
        
    - name: restart ufw
      systemd:
        name: ufw
        state: restarted
      when: ansible_distribution == 'Ubuntu'
