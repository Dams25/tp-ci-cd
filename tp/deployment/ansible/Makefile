# ============================================
# MAKEFILE: Automatisation des t√¢ches de d√©ploiement
# DESCRIPTION: Interface unifi√©e pour toutes les op√©rations
# VERSION: 1.0
# ============================================

.PHONY: help deploy rollback health-check logs backup clean test docs

# Variables par d√©faut
APP_VERSION ?= $(shell git describe --tags --always --dirty 2>/dev/null || echo "latest")
ENVIRONMENT ?= production
INVENTORY ?= inventory.ini
PLAYBOOK ?= playbook-deploy.yml
ANSIBLE_CONFIG ?= ansible.cfg

# Configuration
ANSIBLE_OPTS := -i $(INVENTORY) --extra-vars "app_version=$(APP_VERSION)" --extra-vars "app_environment=$(ENVIRONMENT)"
ANSIBLE_VAULT_FILE := vars/vault.yml
LOG_DIR := logs
BACKUP_DIR := backup

# Couleurs pour l'affichage
BLUE := \033[34m
GREEN := \033[32m
YELLOW := \033[33m
RED := \033[31m
RESET := \033[0m

help: ## Affiche l'aide
	@echo "$(BLUE)üöÄ Syst√®me de d√©ploiement TODO List$(RESET)"
	@echo ""
	@echo "$(GREEN)Commandes disponibles:$(RESET)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(BLUE)%-20s$(RESET) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)Variables d'environnement:$(RESET)"
	@echo "  APP_VERSION   Version √† d√©ployer (d√©faut: $(APP_VERSION))"
	@echo "  ENVIRONMENT   Environnement cible (d√©faut: $(ENVIRONMENT))"
	@echo "  INVENTORY     Fichier d'inventaire (d√©faut: $(INVENTORY))"
	@echo ""
	@echo "$(YELLOW)Exemples:$(RESET)"
	@echo "  make deploy APP_VERSION=1.2.3 ENVIRONMENT=staging"
	@echo "  make rollback ROLLBACK_TO=1.2.2"
	@echo "  make health-check"

# V√©rifications pr√©liminaires
check-requirements: ## V√©rifie les pr√©requis
	@echo "$(BLUE)üîç V√©rification des pr√©requis...$(RESET)"
	@command -v ansible-playbook >/dev/null || (echo "$(RED)‚ùå Ansible non install√©$(RESET)" && exit 1)
	@command -v git >/dev/null || (echo "$(RED)‚ùå Git non install√©$(RESET)" && exit 1)
	@test -f $(INVENTORY) || (echo "$(RED)‚ùå Fichier d'inventaire manquant: $(INVENTORY)$(RESET)" && exit 1)
	@test -f $(PLAYBOOK) || (echo "$(RED)‚ùå Playbook manquant: $(PLAYBOOK)$(RESET)" && exit 1)
	@echo "$(GREEN)‚úÖ Tous les pr√©requis sont satisfaits$(RESET)"

check-vault: ## V√©rifie l'acc√®s au vault Ansible
	@echo "$(BLUE)üîê V√©rification du vault...$(RESET)"
	@ansible-vault view $(ANSIBLE_VAULT_FILE) --vault-password-file .vault_pass >/dev/null 2>&1 || \
		(echo "$(RED)‚ùå Impossible d'acc√©der au vault. V√©rifiez le mot de passe.$(RESET)" && exit 1)
	@echo "$(GREEN)‚úÖ Vault accessible$(RESET)"

syntax-check: check-requirements ## V√©rifie la syntaxe du playbook
	@echo "$(BLUE)üìù V√©rification de la syntaxe...$(RESET)"
	@ansible-playbook $(PLAYBOOK) $(ANSIBLE_OPTS) --syntax-check
	@echo "$(GREEN)‚úÖ Syntaxe correcte$(RESET)"

dry-run: check-requirements check-vault ## Simulation de d√©ploiement (dry-run)
	@echo "$(BLUE)üß™ Simulation de d√©ploiement...$(RESET)"
	@ansible-playbook $(PLAYBOOK) $(ANSIBLE_OPTS) --check --diff --vault-password-file .vault_pass

deploy: check-requirements check-vault syntax-check ## D√©ploie l'application
	@echo "$(BLUE)üöÄ D√©ploiement de $(APP_VERSION) en $(ENVIRONMENT)...$(RESET)"
	@mkdir -p $(LOG_DIR)
	@ansible-playbook $(PLAYBOOK) $(ANSIBLE_OPTS) \
		--vault-password-file .vault_pass \
		--extra-vars "deployment_start_time=$(shell date +%s)" \
		| tee $(LOG_DIR)/deploy-$(APP_VERSION)-$(shell date +%s).log
	@echo "$(GREEN)‚úÖ D√©ploiement termin√©$(RESET)"

deploy-staging: ## D√©ploiement en staging
	@$(MAKE) deploy ENVIRONMENT=staging INVENTORY=inventory-staging.ini

deploy-production: ## D√©ploiement en production
	@echo "$(YELLOW)‚ö†Ô∏è  D√©ploiement en PRODUCTION$(RESET)"
	@read -p "√ätes-vous s√ªr de vouloir d√©ployer $(APP_VERSION) en production? [y/N] " confirm && \
		if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
			$(MAKE) deploy ENVIRONMENT=production; \
		else \
			echo "$(YELLOW)D√©ploiement annul√©$(RESET)"; \
		fi

rollback: ## Effectue un rollback (ROLLBACK_TO=version)
	@if [ -z "$(ROLLBACK_TO)" ]; then \
		echo "$(RED)‚ùå Variable ROLLBACK_TO requise$(RESET)"; \
		echo "Exemple: make rollback ROLLBACK_TO=1.2.2"; \
		exit 1; \
	fi
	@echo "$(YELLOW)üîÑ Rollback vers $(ROLLBACK_TO)...$(RESET)"
	@ansible-playbook playbooks/rollback.yml $(ANSIBLE_OPTS) \
		--extra-vars "rollback_to_version=$(ROLLBACK_TO)" \
		--vault-password-file .vault_pass
	@echo "$(GREEN)‚úÖ Rollback termin√©$(RESET)"

emergency-rollback: ## Rollback d'urgence vers la derni√®re version stable
	@echo "$(RED)üö® ROLLBACK D'URGENCE$(RESET)"
	@ansible-playbook playbooks/emergency-rollback.yml $(ANSIBLE_OPTS) \
		--vault-password-file .vault_pass

health-check: ## V√©rifie la sant√© de l'application
	@echo "$(BLUE)üè• V√©rification de sant√©...$(RESET)"
	@ansible-playbook playbooks/health-check.yml $(ANSIBLE_OPTS) \
		--vault-password-file .vault_pass

status: ## Affiche le statut actuel du d√©ploiement
	@echo "$(BLUE)üìä Statut du d√©ploiement...$(RESET)"
	@ansible-playbook playbooks/status.yml $(ANSIBLE_OPTS) \
		--vault-password-file .vault_pass

logs: ## Affiche les logs de l'application
	@echo "$(BLUE)üìã Logs de l'application...$(RESET)"
	@ansible all $(ANSIBLE_OPTS) -m shell \
		-a "cd {{ app_directory }} && docker-compose logs --tail=100 -f app"

logs-follow: ## Suit les logs en temps r√©el
	@echo "$(BLUE)üìã Suivi des logs en temps r√©el...$(RESET)"
	@ansible all $(ANSIBLE_OPTS) -m shell \
		-a "cd {{ app_directory }} && docker-compose logs -f"

backup: ## Effectue une sauvegarde manuelle
	@echo "$(BLUE)üíæ Sauvegarde manuelle...$(RESET)"
	@ansible-playbook playbooks/backup.yml $(ANSIBLE_OPTS) \
		--vault-password-file .vault_pass

restore: ## Restaure depuis une sauvegarde (BACKUP_DATE=YYYY-MM-DD)
	@if [ -z "$(BACKUP_DATE)" ]; then \
		echo "$(RED)‚ùå Variable BACKUP_DATE requise$(RESET)"; \
		echo "Exemple: make restore BACKUP_DATE=2024-01-15"; \
		exit 1; \
	fi
	@echo "$(YELLOW)üì• Restauration depuis $(BACKUP_DATE)...$(RESET)"
	@ansible-playbook playbooks/restore.yml $(ANSIBLE_OPTS) \
		--extra-vars "backup_date=$(BACKUP_DATE)" \
		--vault-password-file .vault_pass

test: ## Lance les tests sur l'application d√©ploy√©e
	@echo "$(BLUE)üß™ Lancement des tests...$(RESET)"
	@ansible-playbook playbooks/test.yml $(ANSIBLE_OPTS) \
		--vault-password-file .vault_pass

clean: ## Nettoie les ressources Docker
	@echo "$(BLUE)üßπ Nettoyage des ressources...$(RESET)"
	@ansible-playbook playbooks/cleanup.yml $(ANSIBLE_OPTS) \
		--vault-password-file .vault_pass

# Par d√©faut, afficher l'aide
.DEFAULT_GOAL := help

## Configuration initiale
setup:
	@echo "$(BLUE)üìã Configuration initiale...$(NC)"
	@if [ ! -f $(INVENTORY) ]; then \
		cp inventory.ini.example $(INVENTORY); \
		echo "$(GREEN)‚úÖ Fichier d'inventaire cr√©√©: $(INVENTORY)$(NC)"; \
		echo "$(YELLOW)‚ö†Ô∏è  √âditez $(INVENTORY) avec vos serveurs !$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Fichier $(INVENTORY) existe d√©j√†$(NC)"; \
	fi
	@chmod +x quick-install.sh
	@echo "$(GREEN)‚úÖ Configuration termin√©e$(NC)"

## Test de connectivit√©
check:
	@echo "$(BLUE)üîó Test de connectivit√©...$(NC)"
	@if [ ! -f $(INVENTORY) ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  Lancez d'abord: make setup$(NC)"; \
		exit 1; \
	fi
	ansible docker_servers -i $(INVENTORY) -m ping
	@echo "$(GREEN)‚úÖ Connectivit√© valid√©e$(NC)"

## D√©ploiement infrastructure compl√®te
deploy:
	@echo "$(BLUE)üöÄ D√©ploiement infrastructure...$(NC)"
	@if [ ! -f $(INVENTORY) ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  Lancez d'abord: make setup$(NC)"; \
		exit 1; \
	fi
	ansible-playbook -i $(INVENTORY) $(PLAYBOOK)
	@echo "$(GREEN)‚úÖ D√©ploiement termin√©$(NC)"

## Simulation du d√©ploiement
deploy-check:
	@echo "$(BLUE)üß™ Simulation du d√©ploiement...$(NC)"
	ansible-playbook -i $(INVENTORY) $(PLAYBOOK) --check

## D√©ploiement avec tags sp√©cifiques
deploy-tags:
	@echo "$(BLUE)üéØ D√©ploiement avec tags: $(TAGS)$(NC)"
	ansible-playbook -i $(INVENTORY) $(PLAYBOOK) --tags "$(TAGS)"

## Installation Docker uniquement
docker:
	@echo "$(BLUE)üê≥ Installation Docker...$(NC)"
	ansible-playbook -i $(INVENTORY) $(PLAYBOOK) --tags "docker"

## Configuration s√©curit√© uniquement
security:
	@echo "$(BLUE)üîí Configuration s√©curit√©...$(NC)"
	ansible-playbook -i $(INVENTORY) $(PLAYBOOK) --tags "security,firewall"

## Installation monitoring
monitoring:
	@echo "$(BLUE)üìä Installation monitoring...$(NC)"
	ansible-playbook -i $(INVENTORY) $(PLAYBOOK) --tags "monitoring" -e "monitoring_enabled=true"

## V√©rification post-installation
verify:
	@echo "$(BLUE)‚úÖ V√©rification post-installation...$(NC)"
	@echo "$(YELLOW)üê≥ Version Docker:$(NC)"
	ansible docker_servers -i $(INVENTORY) -m command -a "docker --version"
	@echo "$(YELLOW)üîß Version Docker Compose:$(NC)"
	ansible docker_servers -i $(INVENTORY) -m command -a "docker compose version"
	@echo "$(YELLOW)üë§ Test permissions:$(NC)"
	ansible docker_servers -i $(INVENTORY) -m command -a "docker ps" --become-user=deploy
	@echo "$(GREEN)‚úÖ V√©rification termin√©e$(NC)"

## Statut des serveurs
status:
	@echo "$(BLUE)üìä Statut des serveurs...$(NC)"
	ansible docker_servers -i $(INVENTORY) -m command -a "systemctl status docker --no-pager"
	ansible docker_servers -i $(INVENTORY) -m command -a "df -h"

## Nettoyage
clean:
	@echo "$(BLUE)üßπ Nettoyage...$(NC)"
	@rm -f *.retry
	@rm -rf __pycache__
	@find . -name "*.pyc" -delete
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

## Afficher les logs
logs:
	@echo "$(BLUE)üìù Logs r√©cents...$(NC)"
	@if [ -f ansible.log ]; then \
		tail -50 ansible.log; \
	else \
		echo "$(YELLOW)Aucun fichier de log trouv√©$(NC)"; \
	fi

## Installation interactive
interactive:
	@echo "$(BLUE)üîß Installation interactive...$(NC)"
	./quick-install.sh

## Mode rapide (tout en un)
quick: setup check deploy verify
	@echo "$(GREEN)üéâ Installation rapide termin√©e !$(NC)"

## D√©ploiement production s√©curis√©
production:
	@echo "$(BLUE)üè≠ D√©ploiement production...$(NC)"
	ansible-playbook -i $(INVENTORY) $(PLAYBOOK) \
		-e "firewall_enabled=true" \
		-e "monitoring_enabled=true" \
		-e "fail2ban_enabled=true" \
		-e "automatic_updates.enabled=true"
	@echo "$(GREEN)‚úÖ D√©ploiement production termin√©$(NC)"

## Aide d√©taill√©e
info:
	@echo "$(BLUE)üìö Informations d√©taill√©es:$(NC)"
	@echo ""
	@echo "$(GREEN)Fichiers principaux:$(NC)"
	@echo "  playbook-infrastructure.yml - Playbook principal"
	@echo "  inventory.ini               - Configuration serveurs"
	@echo "  vars/infrastructure.yml     - Variables principales"
	@echo "  vars/security.yml           - Configuration s√©curit√©"
	@echo ""
	@echo "$(GREEN)R√¥les disponibles:$(NC)"
	@echo "  system-update     - Mise √† jour syst√®me"
	@echo "  docker-installation - Installation Docker"
	@echo "  user-configuration - Configuration utilisateur"
	@echo "  firewall-security  - S√©curit√© et firewall"
	@echo "  directory-structure - Structure r√©pertoires"
	@echo "  monitoring-tools   - Outils de monitoring"
	@echo ""
	@echo "$(GREEN)Documentation:$(NC)"
	@echo "  README-INFRASTRUCTURE.md - Guide complet"
	@echo ""
