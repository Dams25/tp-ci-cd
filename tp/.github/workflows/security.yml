# üõ°Ô∏è Security Scanning Pipeline
# Analyses de s√©curit√© automatiques et continues

name: üõ°Ô∏è Security Scanning

on:
  # Scan automatique sur push et PR
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  
  # Scan programm√© (hebdomadaire)
  schedule:
    - cron: '0 2 * * 1'  # Tous les lundis √† 2h00 UTC
  
  # D√©clenchement manuel
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - code-only
        - dependencies-only
        - docker-only

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # üîç Job: Analyse statique du code (CodeQL)
  codeql-analysis:
    name: üîç CodeQL Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type != 'dependencies-only' && github.event.inputs.scan_type != 'docker-only'
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
        
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîç Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: +security-and-quality

      - name: üèóÔ∏è Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: üîç Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  # üì¶ Job: Analyse des d√©pendances
  dependency-analysis:
    name: üì¶ Dependency Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type != 'code-only' && github.event.inputs.scan_type != 'docker-only'
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'tp/package-lock.json'

      - name: üì¶ Install dependencies
        working-directory: ./tp
        run: npm ci --audit

      - name: üõ°Ô∏è Run npm audit
        working-directory: ./tp
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true
          npm audit --audit-level=moderate

      - name: üîç Dependency Review
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'

      - name: üõ°Ô∏è Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --file=tp/package.json
        continue-on-error: true

      - name: üì§ Upload Snyk results
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
        continue-on-error: true

      - name: üìä Generate dependency report
        if: always()
        run: |
          echo "## üì¶ Dependency Security Report" >> $GITHUB_STEP_SUMMARY
          echo "- üõ°Ô∏è npm audit completed" >> $GITHUB_STEP_SUMMARY
          echo "- üîç Dependency review executed" >> $GITHUB_STEP_SUMMARY
          echo "- üêç Snyk security scan performed" >> $GITHUB_STEP_SUMMARY

  # üê≥ Job: Analyse s√©curit√© Docker
  docker-security:
    name: üê≥ Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type != 'code-only' && github.event.inputs.scan_type != 'dependencies-only'
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üî® Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ./tp
          file: ./tp/deployment/docker/Dockerfile
          tags: todolist-app:security-scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: üõ°Ô∏è Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'todolist-app:security-scan'
          format: 'sarif'
          output: 'trivy-container.sarif'

      - name: üîç Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './tp'
          format: 'sarif'
          output: 'trivy-fs.sarif'

      - name: üõ°Ô∏è Run Trivy config scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './tp/deployment'
          format: 'sarif'
          output: 'trivy-config.sarif'

      - name: üì§ Upload Trivy scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: |
            trivy-container.sarif
            trivy-fs.sarif
            trivy-config.sarif

      - name: üêã Run Hadolint (Dockerfile linter)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./tp/deployment/docker/Dockerfile
          format: sarif
          output-file: hadolint.sarif
          no-fail: true

      - name: üì§ Upload Hadolint results
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: hadolint.sarif

      - name: üîê Run Docker Bench Security
        run: |
          # Installation et ex√©cution de Docker Bench Security
          git clone https://github.com/docker/docker-bench-security.git
          cd docker-bench-security
          sudo ./docker-bench-security.sh -l docker-bench.log || true

      - name: üìä Generate Docker security report
        run: |
          echo "## üê≥ Docker Security Report" >> $GITHUB_STEP_SUMMARY
          echo "- üõ°Ô∏è Trivy container scan completed" >> $GITHUB_STEP_SUMMARY
          echo "- üîç Trivy filesystem scan completed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚öôÔ∏è Trivy config scan completed" >> $GITHUB_STEP_SUMMARY
          echo "- üêã Hadolint Dockerfile analysis completed" >> $GITHUB_STEP_SUMMARY
          echo "- üîê Docker Bench Security executed" >> $GITHUB_STEP_SUMMARY

  # üîê Job: Analyse des secrets
  secrets-analysis:
    name: üîê Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: üîê Run GitLeaks secrets scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: üìä Generate secrets report
        run: |
          echo "## üîê Secrets Detection Report" >> $GITHUB_STEP_SUMMARY
          echo "- üîç TruffleHog scan completed" >> $GITHUB_STEP_SUMMARY
          echo "- üîê GitLeaks scan completed" >> $GITHUB_STEP_SUMMARY

  # üõ°Ô∏è Job: Infrastructure as Code Security
  iac-security:
    name: üõ°Ô∏è Infrastructure Security
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîç Run Checkov IaC scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./tp/deployment
          framework: dockerfile,yaml,github_actions
          output_format: sarif
          output_file_path: checkov.sarif

      - name: üì§ Upload Checkov results
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: checkov.sarif

      - name: üîç Run Ansible security scan
        working-directory: ./tp/deployment/ansible
        run: |
          # Installation et scan avec ansible-lint
          pip install ansible-lint
          ansible-lint --parseable --severity . > ansible-security.log || true
          
          # Analyse sp√©cifique s√©curit√©
          grep -i "password\|secret\|key" . -r --include="*.yml" --include="*.yaml" > security-patterns.log || true

      - name: üìä Generate IaC security report
        run: |
          echo "## üõ°Ô∏è Infrastructure Security Report" >> $GITHUB_STEP_SUMMARY
          echo "- üîç Checkov IaC scan completed" >> $GITHUB_STEP_SUMMARY
          echo "- üé≠ Ansible security analysis completed" >> $GITHUB_STEP_SUMMARY

  # üìä Job: Agr√©gation des r√©sultats de s√©curit√©
  security-summary:
    name: üìä Security Summary
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-analysis, docker-security, secrets-analysis, iac-security]
    if: always()
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üìä Analyze security results
        id: security-analysis
        run: |
          # Analyse des r√©sultats de tous les scans de s√©curit√©
          CODEQL_STATUS="${{ needs.codeql-analysis.result }}"
          DEPS_STATUS="${{ needs.dependency-analysis.result }}"
          DOCKER_STATUS="${{ needs.docker-security.result }}"
          SECRETS_STATUS="${{ needs.secrets-analysis.result }}"
          IAC_STATUS="${{ needs.iac-security.result }}"
          
          echo "codeql_status=$CODEQL_STATUS" >> $GITHUB_OUTPUT
          echo "deps_status=$DEPS_STATUS" >> $GITHUB_OUTPUT
          echo "docker_status=$DOCKER_STATUS" >> $GITHUB_OUTPUT
          echo "secrets_status=$SECRETS_STATUS" >> $GITHUB_OUTPUT
          echo "iac_status=$IAC_STATUS" >> $GITHUB_OUTPUT
          
          # D√©terminer le niveau de s√©curit√© global
          FAILED_SCANS=0
          [[ "$CODEQL_STATUS" == "failure" ]] && ((FAILED_SCANS++))
          [[ "$DEPS_STATUS" == "failure" ]] && ((FAILED_SCANS++))
          [[ "$DOCKER_STATUS" == "failure" ]] && ((FAILED_SCANS++))
          [[ "$SECRETS_STATUS" == "failure" ]] && ((FAILED_SCANS++))
          [[ "$IAC_STATUS" == "failure" ]] && ((FAILED_SCANS++))
          
          if [ $FAILED_SCANS -eq 0 ]; then
            echo "security_level=HIGH" >> $GITHUB_OUTPUT
            echo "security_emoji=üü¢" >> $GITHUB_OUTPUT
            echo "security_message=All security scans passed!" >> $GITHUB_OUTPUT
          elif [ $FAILED_SCANS -le 2 ]; then
            echo "security_level=MEDIUM" >> $GITHUB_OUTPUT
            echo "security_emoji=üü°" >> $GITHUB_OUTPUT
            echo "security_message=Some security issues detected" >> $GITHUB_OUTPUT
          else
            echo "security_level=LOW" >> $GITHUB_OUTPUT
            echo "security_emoji=üî¥" >> $GITHUB_OUTPUT
            echo "security_message=Multiple security issues detected!" >> $GITHUB_OUTPUT
          fi

      - name: üìã Generate comprehensive security report
        run: |
          cat > security-report.md << EOF
          # üõ°Ô∏è Comprehensive Security Report
          
          **Security Level:** ${{ steps.security-analysis.outputs.security_emoji }} ${{ steps.security-analysis.outputs.security_level }}
          **Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          ## üìä Security Scan Results
          
          | Scan Type | Status | Description |
          |-----------|--------|-------------|
          | üîç CodeQL Analysis | ${{ needs.codeql-analysis.result }} | Static code analysis for vulnerabilities |
          | üì¶ Dependency Analysis | ${{ needs.dependency-analysis.result }} | Third-party dependency vulnerabilities |
          | üê≥ Docker Security | ${{ needs.docker-security.result }} | Container and image security scan |
          | üîê Secrets Detection | ${{ needs.secrets-analysis.result }} | Leaked credentials and secrets |
          | üõ°Ô∏è Infrastructure Security | ${{ needs.iac-security.result }} | Infrastructure as Code security |
          
          ## üéØ Security Recommendations
          
          ### High Priority
          - Review any failed security scans immediately
          - Update dependencies with known vulnerabilities
          - Rotate any exposed secrets or credentials
          
          ### Medium Priority
          - Implement additional security headers
          - Enable more strict linting rules
          - Set up automated security monitoring
          
          ### Continuous Improvement
          - Regular security training for team
          - Implement security champions program
          - Keep security tools and signatures updated
          
          ## üîó Resources
          - [Security Advisories](https://github.com/${{ github.repository }}/security/advisories)
          - [Dependabot Alerts](https://github.com/${{ github.repository }}/security/dependabot)
          - [Code Scanning Alerts](https://github.com/${{ github.repository }}/security/code-scanning)
          
          ---
          *This report was generated automatically by GitHub Actions*
          EOF

      - name: üì§ Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md
          retention-days: 90

      - name: üö® Security notification
        if: steps.security-analysis.outputs.security_level == 'LOW'
        run: |
          echo "üö® SECURITY ALERT: Multiple security issues detected!" >> $GITHUB_STEP_SUMMARY
          echo "Please review the security scan results immediately." >> $GITHUB_STEP_SUMMARY

      - name: üèÜ Security summary
        run: |
          echo "## üõ°Ô∏è Security Scan Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Security Level:** ${{ steps.security-analysis.outputs.security_emoji }} ${{ steps.security-analysis.outputs.security_level }}" >> $GITHUB_STEP_SUMMARY
          echo "**Message:** ${{ steps.security-analysis.outputs.security_message }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Scan Results:" >> $GITHUB_STEP_SUMMARY
          echo "- üîç **CodeQL Analysis:** ${{ needs.codeql-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üì¶ **Dependency Analysis:** ${{ needs.dependency-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üê≥ **Docker Security:** ${{ needs.docker-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üîê **Secrets Detection:** ${{ needs.secrets-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üõ°Ô∏è **Infrastructure Security:** ${{ needs.iac-security.result }}" >> $GITHUB_STEP_SUMMARY
